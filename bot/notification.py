import logging
from typing import Dict, Any, List, Optional
import asyncio

from aiogram import Bot, Dispatcher, types
from aiogram.utils import exceptions

from config import TELEGRAM_BOT_TOKEN

logger = logging.getLogger(__name__)

class NotificationBot:
    """
    –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        self.bot = Bot(token=TELEGRAM_BOT_TOKEN)
        self.dp = Dispatcher(self.bot)
        self._subscribed_users = {}  # user_id -> —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        self.dp.register_message_handler(self._cmd_start, commands=["start"])
        self.dp.register_message_handler(self._cmd_help, commands=["help"])
        self.dp.register_message_handler(self._cmd_subscribe, commands=["subscribe"])
        self.dp.register_message_handler(self._cmd_unsubscribe, commands=["unsubscribe"])
        self.dp.register_message_handler(self._cmd_stats, commands=["stats"])
        
        # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        asyncio.create_task(self._start_polling())
        logger.info("Notification bot started")
    
    async def _start_polling(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞."""
        try:
            await self.dp.start_polling()
        except Exception as e:
            logger.error(f"Error starting notification bot: {str(e)}")
    
    async def _cmd_start(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç CryptxSpiderAI.\n\n"
            "–Ø –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n"
            "- üÜï –ù–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–∞—Ö, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤ Telegram\n"
            "- üö® –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∫–∞–º-–ø—Ä–æ–µ–∫—Ç–∞—Ö –Ω–∞ Memepad\n"
            "- üì° –ù–æ–≤—ã—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö —Å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–æ–≤\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
        )
    
    async def _cmd_help(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
        await message.answer(
            "üìö –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n"
            "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n"
            "/subscribe - –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "/unsubscribe - –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
            "- new_tokens - –ù–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ Telegram\n"
            "- scam_alerts - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Å–∫–∞–º–µ\n"
            "- new_channels - –ù–æ–≤—ã–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã\n\n"
            "–ü—Ä–∏–º–µ—Ä: /subscribe new_tokens scam_alerts new_channels"
        )
    
    async def _cmd_stats(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º."""
        from models.db import session, TelegramChannel
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º
            total_channels = session.query(TelegramChannel).count()
            active_channels = session.query(TelegramChannel).filter(TelegramChannel.is_active == True).count()
            high_relevance = session.query(TelegramChannel).filter(
                TelegramChannel.is_active == True,
                TelegramChannel.relevance_score >= 0.7
            ).count()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 –∫–∞–Ω–∞–ª–æ–≤
            top_channels = session.query(TelegramChannel).filter(
                TelegramChannel.is_active == True
            ).order_by(TelegramChannel.relevance_score.desc()).limit(5).all()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_text = (
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
                f"–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: <b>{total_channels}</b>\n"
                f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: <b>{active_channels}</b>\n"
                f"–í—ã—Å–æ–∫–æ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö: <b>{high_relevance}</b>\n\n"
            )
            
            if top_channels:
                stats_text += "<b>–¢–æ–ø-5 –∫–∞–Ω–∞–ª–æ–≤ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏:</b>\n"
                for i, channel in enumerate(top_channels, 1):
                    stats_text += f"{i}. @{channel.username} - {channel.relevance_score:.2f} ({channel.token_mentions_count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π)\n"
            
            await message.answer(stats_text, parse_mode=types.ParseMode.HTML)
            
        except Exception as e:
            logger.error(f"Error generating stats: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    
    async def _cmd_subscribe(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscribe."""
        user_id = message.from_user.id
        args = message.get_args().split()
        
        if not args:
            await message.answer(
                "üîî –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
                "/subscribe new_tokens - –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤\n"
                "/subscribe scam_alerts - –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ —Å–∫–∞–º–µ\n"
                "/subscribe new_channels - –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
                "/subscribe all - –¥–ª—è –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
            )
            return
        
        valid_types = ["new_tokens", "scam_alerts", "new_channels", "all"]
        subscription_types = []
        
        for arg in args:
            if arg in valid_types:
                if arg == "all":
                    subscription_types = ["new_tokens", "scam_alerts", "new_channels"]
                    break
                subscription_types.append(arg)
        
        if not subscription_types:
            await message.answer("‚ùå –£–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
            return
        
        self._subscribed_users[user_id] = subscription_types
        
        await message.answer(
            f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {', '.join(subscription_types)}"
        )
    
    async def _cmd_unsubscribe(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unsubscribe."""
        user_id = message.from_user.id
        args = message.get_args().split()
        
        if not args:
            if user_id in self._subscribed_users:
                del self._subscribed_users[user_id]
                await message.answer("üîï –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
            else:
                await message.answer("‚ÑπÔ∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
            return
        
        if user_id not in self._subscribed_users:
            await message.answer("‚ÑπÔ∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
            return
        
        valid_types = ["new_tokens", "scam_alerts", "new_channels", "all"]
        unsubscribe_types = []
        
        for arg in args:
            if arg in valid_types:
                if arg == "all":
                    del self._subscribed_users[user_id]
                    await message.answer("üîï –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
                    return
                unsubscribe_types.append(arg)
        
        if not unsubscribe_types:
            await message.answer("‚ùå –£–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
            return
        
        current_types = self._subscribed_users[user_id]
        new_types = [t for t in current_types if t not in unsubscribe_types]
        
        if new_types:
            self._subscribed_users[user_id] = new_types
            await message.answer(
                f"üîî –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç: {', '.join(unsubscribe_types)}\n"
                f"–û—Å—Ç–∞–ª–∏—Å—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞: {', '.join(new_types)}"
            )
        else:
            del self._subscribed_users[user_id]
            await message.answer("üîï –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    
    async def send_alert(self, notification_type: str, message: str, chat_id: Optional[int] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        
        Args:
            notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ("new_tokens", "scam_alerts" –∏–ª–∏ "new_channels")
            message: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ï—Å–ª–∏ None, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
        
        Returns:
            –£—Å–ø–µ—à–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        """
        if chat_id:
            try:
                await self.bot.send_message(chat_id, message, parse_mode=types.ParseMode.HTML)
                return True
            except exceptions.BotBlocked:
                logger.error(f"Target [ID:{chat_id}]: blocked by user")
            except exceptions.ChatNotFound:
                logger.error(f"Target [ID:{chat_id}]: chat not found")
            except exceptions.RetryAfter as e:
                logger.error(f"Target [ID:{chat_id}]: Flood limit exceeded. Sleep {e.timeout} seconds.")
                await asyncio.sleep(e.timeout)
                return await self.send_alert(notification_type, message, chat_id)  # Retry
            except Exception as e:
                logger.error(f"Target [ID:{chat_id}]: {e}")
            return False
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        success_count = 0
        for user_id, types in self._subscribed_users.items():
            if notification_type in types:
                if await self.send_alert(notification_type, message, user_id):
                    success_count += 1
        
        return success_count > 0
    
    async def send_scam_alert(self, token_data: Dict[str, Any], confidence: float) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–º —Å–∫–∞–º–µ.
        
        Args:
            token_data: –î–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–µ
            confidence: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ —Å–∫–∞–º (0-1)
        
        Returns:
            –£—Å–ø–µ—à–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        """
        ticker = token_data.get("ticker", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–∫–µ—Ä")
        name = token_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω")
        score = confidence * 100
        risk_factors = token_data.get("risk_factors", [])
        
        message = (
            f"üö® <b>–°–∫–∞–º-–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b> üö®\n\n"
            f"–¢–æ–∫–µ–Ω: <b>{name}</b> ({ticker})\n"
            f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫–∞–º–∞: <b>{score:.1f}%</b>\n\n"
        )
        
        if risk_factors:
            message += "<b>–ü—Ä–∏—á–∏–Ω—ã:</b>\n"
            for i, reason in enumerate(risk_factors[:5], 1):
                message += f"{i}. {reason}\n"
            
            if len(risk_factors) > 5:
                message += f"...–∏ –µ—â–µ {len(risk_factors) - 5} –ø—Ä–∏—á–∏–Ω\n"
        
        message += "\n‚ö†Ô∏è <b>–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –ø—Ä–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏!</b>"
        
        return await self.send_alert("scam_alerts", message)
    
    async def send_new_token_alert(self, token_data) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Ç–æ–∫–µ–Ω–µ.
        
        Args:
            token_data: –û–±—ä–µ–∫—Ç PotentialToken
        
        Returns:
            –£—Å–ø–µ—à–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        """
        name = token_data.name
        description = token_data.description
        confidence = token_data.confidence_score
        
        # –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if description and len(description) > 200:
            description = description[:197] + "..."
        
        message = (
            f"üÜï <b>–ù–æ–≤—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –æ–±–Ω–∞—Ä—É–∂–µ–Ω!</b>\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{name}</b>\n"
            f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}\n\n"
        )
        
        if description:
            message += f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n{description}\n\n"
        
        message += f"üîç <i>–≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω –µ—â–µ –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –Ω–∞ Memepad, –Ω–æ –∞–∫—Ç–∏–≤–Ω–æ –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è –≤ Telegram.</i>"
        
        return await self.send_alert("new_tokens", message)
    
    async def send_new_channel_alert(self, channel) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ.
        
        Args:
            channel: –û–±—ä–µ–∫—Ç TelegramChannel
        
        Returns:
            –£—Å–ø–µ—à–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        """
        username = channel.username
        title = channel.title or username
        description = channel.description
        relevance = channel.relevance_score
        members = channel.members_count or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if description and len(description) > 150:
            description = description[:147] + "..."
        
        message = (
            f"üì° <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–∞–Ω–∞–ª!</b>\n\n"
            f"–ö–∞–Ω–∞–ª: <b>@{username}</b>\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance:.2f}\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {members}\n\n"
        )
        
        if description:
            message += f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description}\n\n"
        
        message += f"üîç <i>–í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ —á–∞—Å—Ç–æ –æ–±—Å—É–∂–¥–∞—é—Ç—Å—è –∫—Ä–∏–ø—Ç–æ-—Ç–æ–∫–µ–Ω—ã.</i>"
        
        return await self.send_alert("new_channels", message)
    
    async def stop(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±–æ—Ç–∞."""
        await self.bot.close()
        await self.dp.storage.close()
        await self.dp.storage.wait_closed()
